import { components } from "./schema";
export declare const DEFAULT_BASE_URL = "https://passkeys.hanko.io";
type RequestBody<T extends keyof components["requestBodies"]> = Exclude<components["requestBodies"][T], undefined>["content"]["application/json"];
type PostLoginFinalizeBody = RequestBody<"post-login-finalize">;
type PostRegistrationFinalizeBody = RequestBody<"post-registration-finalize">;
export type Tenant = ReturnType<typeof tenant>;
export declare function tenant(config: {
    baseUrl?: string;
    apiKey: string;
    tenantId: string;
}): {
    config: {
        readonly baseUrl: string;
        readonly tenantId: string;
    };
    user(userId: string): {
        credentials(): Promise<{
            id: string;
            name?: string | undefined;
            public_key: string;
            attestation_type: string;
            aaguid: string;
            last_used_at?: string | undefined;
            created_at: string;
            transports: string[];
            backup_eligible: boolean;
            backup_state: boolean;
            is_mfa: boolean;
        }[]>;
        mfa: {
            registration: {
                initialize(data: {
                    username: string;
                    icon?: string;
                    displayName?: string;
                }): Promise<{
                    publicKey: {
                        rp: {
                            id?: string | undefined;
                        } & {
                            name: string;
                        };
                        user: {
                            id: string;
                            displayName: string;
                            name: string;
                        };
                        challenge: string;
                        pubKeyCredParams: {
                            type: "public-key";
                            alg: number;
                        }[];
                        timeout?: number | undefined;
                        excludeCredentials?: {
                            type: "public-key";
                            id: string;
                            transports?: ("ble" | "hybrid" | "internal" | "nfc" | "usb")[] | undefined;
                        }[] | undefined;
                        authenticatorSelection?: {
                            authenticatorAttachement?: "cross-platform" | "platform" | undefined;
                            requireResidentKey?: boolean | undefined;
                            residentKey?: "discouraged" | "preferred" | "required" | undefined;
                            userVerification?: "discouraged" | "preferred" | "required" | undefined;
                        } | undefined;
                        attestation?: "direct" | "enterprise" | "indirect" | "none" | undefined;
                        extensions?: {
                            appid?: string | undefined;
                            appidExclude?: string | undefined;
                            credProps?: boolean | undefined;
                        } | undefined;
                    };
                }>;
                finalize(credential: PostRegistrationFinalizeBody): Promise<{
                    token?: string | undefined;
                }>;
            };
            login: {
                initialize(): Promise<{
                    publicKey?: {
                        challenge: string;
                        timeout?: number | undefined;
                        rpId?: string | undefined;
                        allowCredentials?: {
                            type: "public-key";
                            id: string;
                            transports?: ("ble" | "hybrid" | "internal" | "nfc" | "usb")[] | undefined;
                        }[] | undefined;
                        userVerification?: "discouraged" | "preferred" | "required" | undefined;
                        extensions?: {
                            appid?: boolean | undefined;
                            appidExclude?: boolean | undefined;
                            credProps?: {
                                rk?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                    } | undefined;
                    mediation?: "required" | "optional" | "silent" | undefined;
                }>;
                finalize(credential: PostLoginFinalizeBody): Promise<{
                    token?: string | undefined;
                }>;
            };
        };
    };
    jwks(): Promise<{
        keys?: {
            alg?: string | undefined;
            e?: string | undefined;
            kid?: string | undefined;
            kty?: string | undefined;
            n?: string | undefined;
            use?: string | undefined;
        }[] | undefined;
    }>;
    login: {
        initialize(): Promise<{
            publicKey?: {
                challenge: string;
                timeout?: number | undefined;
                rpId?: string | undefined;
                allowCredentials?: {
                    type: "public-key";
                    id: string;
                    transports?: ("ble" | "hybrid" | "internal" | "nfc" | "usb")[] | undefined;
                }[] | undefined;
                userVerification?: "discouraged" | "preferred" | "required" | undefined;
                extensions?: {
                    appid?: boolean | undefined;
                    appidExclude?: boolean | undefined;
                    credProps?: {
                        rk?: boolean | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            mediation?: "required" | "optional" | "silent" | undefined;
        }>;
        /**
         * Finalize the login process. The first argument should be the credential returned by the user's browser (from `navigator.credentials.get()`)
         */
        finalize(credential: PostLoginFinalizeBody): Promise<{
            token?: string | undefined;
        }>;
    };
    registration: {
        initialize(data: {
            userId: string;
            username: string;
            icon?: string;
            displayName?: string;
        }): Promise<{
            publicKey: {
                rp: {
                    id?: string | undefined;
                } & {
                    name: string;
                };
                user: {
                    id: string;
                    displayName: string;
                    name: string;
                };
                challenge: string;
                pubKeyCredParams: {
                    type: "public-key";
                    alg: number;
                }[];
                timeout?: number | undefined;
                excludeCredentials?: {
                    type: "public-key";
                    id: string;
                    transports?: ("ble" | "hybrid" | "internal" | "nfc" | "usb")[] | undefined;
                }[] | undefined;
                authenticatorSelection?: {
                    authenticatorAttachement?: "cross-platform" | "platform" | undefined;
                    requireResidentKey?: boolean | undefined;
                    residentKey?: "discouraged" | "preferred" | "required" | undefined;
                    userVerification?: "discouraged" | "preferred" | "required" | undefined;
                } | undefined;
                attestation?: "direct" | "enterprise" | "indirect" | "none" | undefined;
                extensions?: {
                    appid?: string | undefined;
                    appidExclude?: string | undefined;
                    credProps?: boolean | undefined;
                } | undefined;
            };
        }>;
        /**
         * Finalize the registration process. The first argument should be the credential returned by the user's browser (from `navigator.credentials.create()`)
         */
        finalize(credential: PostRegistrationFinalizeBody): Promise<{
            token?: string | undefined;
        }>;
    };
    credential(credentialId: string): {
        remove(): Promise<never>;
    };
};
export {};
